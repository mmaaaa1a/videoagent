# Optimized Multi-stage Dockerfile for VideoRAG Production
# syntax=docker/dockerfile:1

# Web frontend stage
FROM node:20-alpine AS web-frontend

WORKDIR /app/web

# Copy web package files first (for better caching)
COPY web/package*.json ./

# Install dependencies
RUN npm ci --only=production=false

# Copy web source code
COPY web/src ./src
COPY web/public ./public
COPY web/vite.config.ts ./
COPY web/index.html ./
COPY web/tsconfig.json ./
COPY web/tsconfig.node.json ./

# Build web frontend
RUN npm run build

# Python backend stage with caching optimization
FROM python:3.10-slim AS backend

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    DEBIAN_FRONTEND=noninteractive \
    NODE_ENV=production \
    FORCE_CPU=1

# Install system dependencies in separate layer for better caching
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    ffmpeg \
    libsm6 \
    libxext6 \
    libfontconfig1 \
    libxrender1 \
    libglib2.0-0 \
    ca-certificates \
    && update-ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Create app directory
WORKDIR /app

# Copy Python requirements first (for better caching)
COPY requirements.txt .

# Configure git for better reliability
RUN git config --global http.postBuffer 1048576000 && \
    git config --global http.maxRequestBuffer 100M && \
    git config --global core.compression 0 && \
    git config --global safe.directory '/tmp/pip-req-build-*' && \
    git config --global safe.directory '/app/*'

# Upgrade pip
RUN pip install --no-cache-dir --upgrade pip

# Install Python requirements with better caching
RUN pip install --no-cache-dir -r requirements.txt --retries 10 --timeout 1000 || \
    (echo "Retrying with different index..." && \
     pip install --no-cache-dir -r requirements.txt -i https://pypi.org/simple/ --retries 10 --timeout 1000 )

# Install heavy dependencies separately for better caching
RUN pip install --no-deps pytorchvideo==0.1.3 || \
    pip install --no-deps pytorchvideo==0.1.3 -i https://pypi.org/simple/

# Install ImageBind with caching
RUN pip install --no-deps git+https://github.com/facebookresearch/ImageBind.git@3fcf5c9039de97f6ff5528ee4a9dce903c5979b3 || \
    (echo "Retry with shallow clone..." && \
     git clone --depth 1 https://github.com/facebookresearch/ImageBind.git /tmp/imagebind && \
     cd /tmp/imagebind && \
     git checkout 3fcf5c9039de97f6ff5528ee4a9dce903c5979b3 && \
     pip install -e . --no-deps && \
     rm -rf /tmp/imagebind)

# Copy application code (after dependencies for better caching)
COPY VideoRAG-algorithm ./VideoRAG-algorithm
COPY backend ./backend

# Copy web frontend build files
COPY --from=web-frontend /app/web/dist ./static

# Create necessary directories
RUN mkdir -p /app/uploads /app/storage /app/logs /app/models

# Set permissions
RUN chmod +x /app/backend/videorag_web_api.py

# Clean up to reduce image size
RUN apt-get remove -y build-essential git \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser
RUN chown -R appuser:appuser /app
USER appuser

# Create optimized startup script
RUN echo '#!/bin/bash\n\
cd /app\n\
echo "Starting VideoRAG Web API..."\n\
echo "Environment: $NODE_ENV"\n\
echo "Port: $SERVER_PORT"\n\
exec python backend/videorag_web_api.py\n\
' > /app/start.sh && chmod +x /app/start.sh

# Expose port
EXPOSE 64451

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:64451/api/health || exit 1

# Use exec form for better signal handling
CMD ["/app/start.sh"]