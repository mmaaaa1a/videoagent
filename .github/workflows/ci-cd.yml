name: VideoRAG CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_to_production:
        description: 'Deploy to production server'
        required: false
        default: 'false'
        type: boolean
      force_rebuild:
        description: 'Force full rebuild without cache'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code quality and security checks
  lint-and-test:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      config-changed: ${{ steps.changes.outputs.config }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          frontend:
            - 'Vimo-desktop/**'
            - 'web/**'
          backend:
            - 'VideoRAG-algorithm/**'
            - 'Vimo-desktop/python_backend/**'
            - 'requirements.txt'
          config:
            - 'docker-compose*.yml'
            - 'Dockerfile*'
            - '.github/workflows/**'
            - '.env*'

    - name: Setup Node.js
      if: steps.changes.outputs.frontend == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          Vimo-desktop/package-lock.json
          web/package-lock.json

    - name: Install pnpm
      if: steps.changes.outputs.frontend == 'true'
      uses: pnpm/action-setup@v2
      with:
        version: 9.10.0

    - name: Install frontend dependencies
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd Vimo-desktop && pnpm install --frozen-lockfile
        cd ../web && npm ci

    - name: Lint frontend code
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd Vimo-desktop && pnpm lint || true
        cd ../web && npm run lint || true

    - name: Setup Python
      if: steps.changes.outputs.backend == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      if: steps.changes.outputs.backend == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
        # Install only essential requirements for linting
        sed -n '1,20p' requirements.txt > /tmp/requirements.txt
        pip install -r /tmp/requirements.txt || true

    - name: Lint Python code
      if: steps.changes.outputs.backend == 'true'
      run: |
        flake8 VideoRAG-algorithm --max-line-length=100 --ignore=E203,W503 || true
        black --check VideoRAG-algorithm || true
        flake8 Vimo-desktop/python_backend --max-line-length=100 --ignore=E203,W503 || true
        black --check Vimo-desktop/python_backend || true

  # Build and push Docker images
  build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        include:
          - platform: linux/amd64
          - platform: linux/arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Determine build target
      id: build-target
      run: |
        if [[ "${{ needs.lint-and-test.outputs.frontend-changed }}" == "true" && "${{ needs.lint-and-test.outputs.backend-changed }}" == "true" ]]; then
          echo "target=backend" >> $GITHUB_OUTPUT
          echo "cache_from=type=gha,scope=backend" >> $GITHUB_OUTPUT
          echo "cache_to=type=gha,mode=max,scope=backend" >> $GITHUB_OUTPUT
        elif [[ "${{ needs.lint-and-test.outputs.backend-changed }}" == "true" ]]; then
          echo "target=backend" >> $GITHUB_OUTPUT
          echo "cache_from=type=gha,scope=backend" >> $GITHUB_OUTPUT
          echo "cache_to=type=gha,mode=max,scope=backend" >> $GITHUB_OUTPUT
        elif [[ "${{ needs.lint-and-test.outputs.frontend-changed }}" == "true" ]]; then
          echo "target=backend" >> $GITHUB_OUTPUT
          echo "cache_from=type=gha,scope=frontend" >> $GITHUB_OUTPUT
          echo "cache_to=type=gha,mode=max,scope=frontend" >> $GITHUB_OUTPUT
        else
          echo "target=backend" >> $GITHUB_OUTPUT
          echo "cache_from=type=gha,scope=config" >> $GITHUB_OUTPUT
          echo "cache_to=type=gha,mode=max,scope=config" >> $GITHUB_OUTPUT
        fi

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.ref }}-${{ steps.build-target.outputs.cache_to }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ github.ref }}-
          ${{ runner.os }}-buildx-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        target: ${{ steps.build-target.outputs.target }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=backend
        cache-to: type=gha,mode=max,scope=backend
        platforms: ${{ matrix.platform }}
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          PNPM_VERSION=9.10.0
        no-cache: ${{ github.event.inputs.force_rebuild == 'true' }}

  # Deploy to production server
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' &&
      (github.event_name == 'push' ||
       github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_production == 'true')

    steps:
    - name: Deploy to 1panel server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          # Set variables
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          IMAGE_TAG="main-${{ github.sha }}"
          CONTAINER_NAME="videorag-web-prod"

          echo "üöÄ Starting deployment of VideoRAG..."
          echo "Image: $IMAGE_NAME:$IMAGE_TAG"

          # Pull latest image
          echo "üì¶ Pulling Docker image..."
          docker pull $IMAGE_NAME:$IMAGE_TAG

          # Stop and remove existing container
          if docker ps -a | grep -q $CONTAINER_NAME; then
            echo "üõë Stopping existing container..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
          fi

          # Update docker-compose.prod.yml with new image
          cd ${{ secrets.SERVER_PATH }}
          sed -i "s|image: videorag/web:latest|image: $IMAGE_NAME:$IMAGE_TAG|" docker-compose.prod.yml

          # Start new container
          echo "üöÄ Starting new container..."
          docker-compose -f docker-compose.prod.yml up -d

          # Wait for health check
          echo "‚è≥ Waiting for health check..."
          sleep 30

          # Verify deployment
          if docker ps | grep -q $CONTAINER_NAME; then
            echo "‚úÖ Deployment successful!"
            echo "üìä Container status:"
            docker ps | grep $CONTAINER_NAME

            # Show logs
            echo "üìã Recent logs:"
            docker logs --tail 20 $CONTAINER_NAME
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi

          # Clean up old images
          echo "üßπ Cleaning up old images..."
          docker image prune -f || true

  # Notify deployment status
  notify:
    needs: [lint-and-test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      if: needs.deploy.result == 'success' || needs.deploy.result == 'failure' || needs.deploy.result == 'skipped'
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "üéâ VideoRAG deployment completed successfully!"
          echo "üì± Application is now available at: https://${{ secrets.SERVER_DOMAIN }}"
        elif [[ "${{ needs.deploy.result }}" == "failure" ]]; then
          echo "‚ùå VideoRAG deployment failed!"
          echo "üîß Please check the logs and try again."
        else
          echo "‚ÑπÔ∏è Deployment was skipped."
        fi

        echo "üìä Build Summary:"
        echo "- Lint & Tests: ${{ needs.lint-and-test.result }}"
        echo "- Build & Push: ${{ needs.build-and-push.result }}"
        echo "- Deploy: ${{ needs.deploy.result }}"